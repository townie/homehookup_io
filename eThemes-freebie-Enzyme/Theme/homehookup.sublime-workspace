{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"assert",
				"assert_raises"
			],
			[
				"mo",
				"monitors"
			],
			[
				"mon",
				"monitor_class"
			],
			[
				"eec",
				"expected_monitors"
			],
			[
				"exe",
				"expection"
			],
			[
				"usr",
				"users_slice"
			],
			[
				"users",
				"users_emails"
			],
			[
				"res",
				"result_users"
			],
			[
				"calen",
				"calendar_list"
			],
			[
				"expect",
				"expected_data"
			],
			[
				"req",
				"request_schema"
			],
			[
				"requ",
				"request_schema"
			],
			[
				"cal",
				"calendar_list"
			],
			[
				"create",
				"create_request"
			],
			[
				"cale",
				"calendar_list"
			],
			[
				"AP",
				"API_DOCUMENT"
			],
			[
				"regit",
				"register_discovery_document"
			],
			[
				"claen",
				"calendarId"
			],
			[
				"opt",
				"optp	option_parse { .. }"
			],
			[
				"even",
				"event_id"
			],
			[
				"ca",
				"calendar"
			],
			[
				"mark",
				"mark_doc_successful"
			],
			[
				"method",
				"method_name"
			],
			[
				"asser",
				"assert_true"
			],
			[
				"fa",
				"fake_doc_id"
			],
			[
				"service",
				"service_id"
			],
			[
				"doc",
				"docs_not_found"
			],
			[
				"servc",
				"service"
			],
			[
				"succes",
				"successful_doc_ids"
			],
			[
				"any",
				"any_instance"
			],
			[
				"get",
				"get_bugfix_cutoff_date"
			],
			[
				"googl",
				"google_docs"
			],
			[
				"updated_",
				"updated_rev_two"
			],
			[
				"pares",
				"parse_content_url"
			],
			[
				"revi",
				"revision_id"
			],
			[
				"content",
				"content_url"
			],
			[
				"serv",
				"service"
			],
			[
				"use",
				"use_cassette"
			],
			[
				"google",
				"google_client"
			],
			[
				"Ser",
				"ServiceConnection"
			],
			[
				"RED",
				"REDIS_FILE_NOT_FOUND_DOC_ID"
			],
			[
				"revis",
				"revision_id_per_day"
			],
			[
				"revo",
				"revision_id_per_day"
			],
			[
				"resp",
				"response_items"
			],
			[
				"asy",
				"run_async_job"
			],
			[
				"to",
				"to_i"
			],
			[
				"mod",
				"module"
			],
			[
				"pro",
				"prototype"
			],
			[
				"chec",
				"check_redis"
			],
			[
				"Redi",
				"REDIS_NON_TRIED_SERVICES"
			],
			[
				"ser",
				"service"
			],
			[
				"sl",
				"slice_of_service_ids"
			],
			[
				"slie",
				"slice_of_service_ids"
			],
			[
				"slice",
				"slice_of_service_ids"
			],
			[
				"s",
				"slice_size"
			],
			[
				"array",
				"service_id_array"
			],
			[
				"fet",
				"fetch_all_services"
			],
			[
				"ex",
				"expected_filename"
			],
			[
				"Google",
				"GoogleDocsDatum"
			],
			[
				"cleanup_f",
				"cleanup_file_name"
			],
			[
				"clean",
				"cleanup"
			],
			[
				"clea",
				"cleanup_file_name"
			],
			[
				"bac",
				"background-color"
			],
			[
				"visi",
				"visted_link"
			],
			[
				"vi",
				"visted_link"
			],
			[
				"url",
				"url_id"
			],
			[
				"fun",
				"function"
			],
			[
				"w",
				"width"
			],
			[
				"te",
				"text-align"
			],
			[
				"da",
				"days_since_logged_in"
			],
			[
				"last",
				"last_three"
			],
			[
				"min",
				"minsize"
			],
			[
				"day",
				"days_61_90"
			],
			[
				"days",
				"days_31_60"
			],
			[
				"max",
				"maxsize"
			],
			[
				"USER",
				"USER_ACTIVE"
			],
			[
				"U",
				"USER_SUSPENDED"
			],
			[
				"dir",
				"directory_api"
			],
			[
				"rate",
				"rate_limit"
			],
			[
				"D",
				"DEFAULT_RATE_LIMIT"
			],
			[
				"acc",
				"accounts"
			],
			[
				"co",
				"contact"
			],
			[
				"fir",
				"first_name"
			],
			[
				"pers",
				"personnel_info"
			],
			[
				"asset",
				"assert_true"
			],
			[
				"in",
				"interval_in_redis"
			],
			[
				"int",
				"interval_setting"
			],
			[
				"goo",
				"google-drive"
			],
			[
				"asse",
				"assert_equal"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 33308,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 287.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"package",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/backupifyadmin/backupify/backupify/lib/backupify/middleware/exception_monitor.rb",
		"/Users/backupifyadmin/.rbenv/versions/1.9.3-p385/gemsets/backupify/gems/rfc2047-0.2/lib/rfc2047.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/user.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/domain_add_users_by_email_.yml",
		"/Users/backupifyadmin/backupify/backupify/app/controllers/user_sessions_controller.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/service_connection/google_calendar/v2/connection.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/backupify/google/contacts/v3/client.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/google_calendar/helper.rb",
		"/Users/backupifyadmin/backupify/backupify/Gemfile",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/post_backup/google/calendar.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/domains/update_google_accounts_scheduler.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/domains/update_google_accounts.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/helpers/google_drive_hierarchy.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/generic/backup/error_handling/google.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/remove_google_forms.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/generate_google_drive_hierarchy_data.rb",
		"/Users/backupifyadmin/backupify/backupify/config/async_job_schedule.yml",
		"/Users/backupifyadmin/backupify/backupify/app/models/add_backup_jobs_on_service_observer.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/json.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/google_calendar_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/backupify/csv_lib.rb",
		"/Users/backupifyadmin/backupify/backupify/Capfile",
		"/Users/backupifyadmin/backupify/backupify/test/unit/service_connection/google_calendar/v2/google_calendar_connection_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/salesforce/filtered_tests/2_month_contiguous_success_edited.json",
		"/Users/backupifyadmin/backupify/backupify/lib/salesforce/salesforce_metadata_wsdl_version_26.xml",
		"/Users/backupifyadmin/backupify/backupify/app/models/base_versioned_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/service.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/service_connection/service_connection_interface.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/backupify/middleware/exception_monitor/base_monitor.rb",
		"/Users/backupifyadmin/backupify/backupify/test/lib/middleware/exception_monitor/login_monitor_test.rb",
		"/Users/backupifyadmin/backupify/backupify/config/application.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/backupify/middleware/exception_monitor/login_monitor.rb",
		"/Users/backupifyadmin/backupify/backupify/test/lib/middleware/execption_monitor_test.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/google_docs/revisions/segment_fetch_spreadsheet_revisions.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/backupify/send_grid.rb",
		"/Users/backupifyadmin/backupify/backupify/config/analytical.yml",
		"/Users/backupifyadmin/backupify/backupify/config.ru",
		"/Users/backupifyadmin/backupify/backupify/script/cassandra_clean_old_s3_backups.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/google_contacts/expected_export.vcf",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/google_contacts/extended_contact.xml",
		"/Users/backupifyadmin/backupify/backupify/test/functional/exports_controller_test.rb",
		"/Users/backupifyadmin/backupify/backupify/.idea/encodings.xml",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/google_docs/revisions/master_fetch_spreadsheet_revisions.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/line_item.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/base_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/google/basic_client/response_validator_auth_error.yml",
		"/Users/backupifyadmin/backupify/backupify/app/assets/stylesheets/compass_twitter_bootstrap/_variables.scss",
		"/Users/backupifyadmin/backupify/backupify/test/unit/jobs/google_docs/revisions/segment_fetch_spreadsheet_revisions_test.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/plugins/open_id_authentication/open_id_authentication.rb",
		"/Users/backupifyadmin/backupify/backupify/log/metadata/collectd-resque-pool_invalid_utf8.log",
		"/Users/backupifyadmin/backupify/backupify/test/unit/backupify/middleware/expection_monitor_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/salesforce/contract_expected.csv",
		"/Users/backupifyadmin/backupify/backupify/app/controllers/exports_controller.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/google_docs_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/base_s3_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/app/assets/javascripts/angular/templates/service_ui/gmail.html",
		"/Users/backupifyadmin/backupify/backupify/app/models/service_concerns/disabled_code_state_machine.rb",
		"/Users/backupifyadmin/backupify/backupify/features/service.feature",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/salesforce/salesforce_segment_backup_soap.yml",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/salesforce/salesforce_segment_bulk_backup.yml",
		"/Users/backupifyadmin/backupify/backupify/script/profile_backup_segment.rb",
		"/Users/backupifyadmin/backupify/backupify/test/integration/jobs/google_docs/drive/v2/segment_backup_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/integration/jobs/google_docs/documents/v3/segment_backup_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/facebook_segment_error.yml",
		"/Users/backupifyadmin/backupify/backupify/test/unit/jobs/salesforce/backup/segment_monitor_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/jobs/google_mail/backup/segment_label_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/jobs/google_mail/segment_compress_content_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/jobs/generic/backup/segment_common_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/jobs/segment_track_failed_data_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/twitter_segment.yml",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/facebook_segment.yml",
		"/Users/backupifyadmin/backupify/backupify/app/models/google_contacts_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/google_calendar/sample_datum_content_2.xml",
		"/Users/backupifyadmin/backupify/backupify/app/views/data/gmail_datum_index.json.rabl",
		"/Users/backupifyadmin/backupify/backupify/app/views/data/gdoc_datum_index.json.rabl",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/google_calendar/sample_datum_content.xml",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/google_calendar/sample_datum_2.json",
		"/Users/backupifyadmin/backupify/backupify/app/views/searches/_datum_labels.html.erb",
		"/Users/backupifyadmin/backupify/backupify/app/views/drive_searches/_datum_labels.html.erb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/twitter_datum_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/salesforce_datum_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/facebook_datum_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/base_datum_test.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/google_calendar/sample_datum.json",
		"/Users/backupifyadmin/backupify/backupify/config/initializers/cassandra_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/twitter_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/salesforce_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/facebook_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/config/rubber/deploy-apache.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/domain.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/google_docs_service.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/service_connection/google_docs_connection.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/service_connection/google_docs_update.rb",
		"/Users/backupifyadmin/backupify/backupify/app/controllers/google_docs_services_controller.rb",
		"/Users/backupifyadmin/backupify/backupify/app/helpers/google_docs_services_helper.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/service_connection/google_drive_connection.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/backup_scheduler/v2/master.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/marketo_activation_observer.rb",
		"/Users/backupifyadmin/backupify/backupify/.idea/misc.xml",
		"/Users/backupifyadmin/backupify/backupify/app/controllers/salesforce_services_controller.rb",
		"/Users/backupifyadmin/backupify/backupify/app/controllers/salesforce/users_controller.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/backupify/statsd_test.rb",
		"/Users/backupifyadmin/backupify/backupify/config/initializers/statsd.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/salesforce/salesforce_segment_monitor_complete.yml",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/google_mail/segment_compress_content.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/jobs/add_new_google_domain_users_test.rb",
		"/Users/backupifyadmin/backupify/backupify/app/models/user_session.rb",
		"/Users/backupifyadmin/backupify/backupify/app/views/searches/_users_services_list.html.erb",
		"/Users/backupifyadmin/backupify/backupify/app/assets/stylesheets/redesign/_user_sessions.scss",
		"/Users/backupifyadmin/backupify/backupify/test/unit/action_dispatch/session/redis_session_store_test.rb",
		"/Users/backupifyadmin/backupify/backupify/lib/jobs/update_archived_google_apps_account_state_scheduler.rb",
		"/Users/backupifyadmin/backupify/backupify/test/scripts/salesforce/delete_history_and_share_table_datum_test.rb",
		"/Users/backupifyadmin/backupify/backupify/config/rubber/role/statsd/localConfig.js",
		"/Users/backupifyadmin/backupify/backupify/script/salesforce/delete_history_and_share_table_datum.rb",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/google_user_lists/directory_fetch_user_state_suspended.yml",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/domain/fetch_user_remote_state_suspended.yml",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/salesforce/filtered_tests/account_select_star_no_data_base.json",
		"/Users/backupifyadmin/backupify/backupify/test/fixtures/vcr/google_user_lists/provisioning_fetch_state_suspended.yml",
		"/Users/backupifyadmin/backupify/backupify/config/rubber/role/passenger/passenger-status-sudoers.conf",
		"/Users/backupifyadmin/backupify/backupify/config/rubber/role/statsd/monit-statsd.conf",
		"/Users/backupifyadmin/backupify/backupify/config/rubber/rubber-statsd.yml",
		"/Users/backupifyadmin/backupify/backupify/config/rubber/deploy-statsd.rb",
		"/Users/backupifyadmin/backupify/backupify/config/rubber/role/statsd/statsd-upstart.conf",
		"/Users/backupifyadmin/backupify/backupify/app/models/system_audit.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/system_audit_test.rb",
		"/Users/backupifyadmin/backupify/backupify/script/archive_to_s3.rb",
		"/Users/backupifyadmin/backupify/backupify/test/unit/search_test.rb",
		"/Users/backupifyadmin/backupify/backupify/app/controllers/users_controller.rb"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"",
			"<open files>",
			"open files,",
			"open files",
			"",
			"*_test.rb",
			"*_test",
			"",
			"*_salesforce",
			"*salesforce",
			"salesforce",
			"",
			"salesforce",
			"",
			"*.css",
			".css",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Faraday::Builder is now Faraday::RackBuilder.",
			"mailer",
			"cql",
			"format_version",
			"parse",
			"V2_API",
			"datum",
			"datum.new",
			"new",
			"calendar_id",
			"hashydash",
			"hashiedash",
			"hashie-dash",
			"datum",
			"track_file_not_found",
			"FILE_NOT_FOUND_DOC_ID_REDIS_KEY",
			"clear_Cache",
			"Backupify",
			"backupify",
			"Backupify",
			"backupify",
			"rack",
			"remote",
			"qualify_for_new_revisions",
			"disabled_code",
			"disabled_Code",
			"disabled",
			"ng-repeat=\"layout in viewLayouts\"",
			"expects",
			"statsd",
			"login_as",
			"login",
			"login_as",
			"login",
			"user.find",
			" @google_accounts",
			"@google_accounts ",
			"@google_accounts",
			"ou",
			"add_users",
			"add",
			"add-by-ou-link",
			"addByOu",
			"add_by_ou",
			"rsp",
			"r",
			"rspec",
			"rack",
			"Faraday::Builder",
			"module",
			"middleware",
			"rspec",
			"auth_email",
			"exceute",
			"execute",
			"apps",
			"readonly",
			"apps",
			"google/calendar/v3/oauth2_events",
			"/google/calendar/v3/oauth2_events",
			"google/calendar/v3/oauth2_calendarlist",
			"api limit",
			"controller",
			"test",
			"checkout",
			"test",
			"controller",
			"checkout",
			"set the full xml document in the metadatum",
			"set the full xml document in the metadatum.",
			"ServiceConnection::GoogleCalendar::V2::ServiceConnectionInterface",
			"ServiceConnection::GoogleCalendar::V2::Connection",
			" ServiceConnection::V2::GoogleCalendarConnection",
			"GoogleCalendarConnection",
			"class GoogleCalendarConnectionTest < ActiveSupport::TestCase\n    include ::TestConstants::GoogleApps::OAuth1Credentials\n\n    BACKUPIFY_RESTORE_LABEL = '(Backupify Restore)'\n    BACKUPIFY_RESTORE_EMAIL = 'backupify.com_kc7q1vd79e34igfop0moj3slf0@group.calendar.google.com'\n\n    context \"GoogleCalendarConnection\" do\n\n      setup do\n        WebMock.reset!\n        VCR.insert_cassette('google_calendar', :record => :once)\n\n        @domain = FactoryGirl.create(:domain, :name => 'backupify.com', :authentication_type => Domain::TWO_LEGGED, :owner => FactoryGirl.create(:user))\n        @user = FactoryGirl.create(:user, :email => 'eric@backupify.com', :source => User::GOOGLE_MARKETPLACE_SOURCE, :activation => nil)\n        @activation = FactoryGirl.create(:activation, :user => @user, :domain => @domain)\n        @service = FactoryGirl.create(:google_calendar_service, :account_name => 'eric@backupify.com', :user => @user)\n\n        @connection = ServiceConnection::GoogleCalendarConnection.new(@service)\n\n        @oauth2_domain = FactoryGirl.create(:domain, :name => 'backupify.org', :authentication_type => Domain::OAUTH_2)\n        @oauth2_user = FactoryGirl.create(:user, :email => 'admin@backupify.org')\n        FactoryGirl.create(:activation, :user => @oauth2_user, :domain => @oauth2_domain)\n        @oauth2_service = FactoryGirl.create(:google_calendar_service, :account_name => 'admin@backupify.org', :user => @oauth2_user)\n        @oauth2_connection = @oauth2_service.connect\n      end\n\n      teardown do\n        VCR.eject_cassette\n      end\n\n      should \"subclass ServiceConnectionInterface\" do\n        assert @connection.is_a?(ServiceConnection::ServiceConnectionInterface)\n      end\n\n      context \"initialize\" do\n\n        should \"accept a service and keep a reference to it\" do\n          assert_equal @service, @connection.instance_variable_get(:@service)\n        end\n\n        should \"create a google client and keep a reference to it\" do\n          assert_not_nil @connection.instance_variable_get(:@client)\n        end\n\n        should \"set statsd_api_call_counter_name properly on the client to enable collection of api call count statistics\" do\n          client = @connection.instance_variable_get(:@client)\n          assert_not_nil client.statsd_api_call_counter_name\n          assert_equal client.statsd_api_call_counter_name, ServiceConnection::GoogleCalendarConnection::STATSD_API_CALL_COUNTER_NAME\n        end\n      end\n\n      context \"each_index_slice\" do\n\n        should \"add the calendar title, id and event url to each item in the slice\" do\n          @connection.each_index_slice(20) do |slice|\n            slice.each do |result|\n              assert_not_nil result[:calendar_title]\n              assert_not_nil result[:event_url]\n              assert_not_nil result[:calendar_id]\n            end\n          end\n        end\n\n        should \"combine events for all calendars and yield to block for each slice, end-to-end\" do\n          items = []\n          @connection.each_index_slice(20) { |slice| items += slice }\n\n          # we expect more than 20 items\n          assert_true items.size > 20\n\n          # each event should have a valid calendar title and url\n          items.each do |item|\n            assert_match /US Holidays|eric@backupify\\.com|PTO/, item[:calendar_title]\n            assert_match /^https/, item[:event_url]\n          end\n        end\n\n        context 'using oauth2' do\n          should \"add the calendar title, id and event url to each item in the slice\" do\n            @oauth2_connection.each_index_slice(20) do |slice|\n              slice.each do |result|\n                assert_not_nil result[:calendar_title]\n                assert_not_nil result[:event_url]\n                assert_not_nil result[:calendar_id]\n              end\n            end\n          end\n\n          should \"combine events for all calendars and yield to block for each slice, end-to-end\" do\n            items = []\n            @oauth2_connection.each_index_slice(20) { |slice| items += slice }\n\n            # we expect more than 20 items\n            assert_true items.size > 20\n\n            # each event should have a valid calendar title and url\n            items.each do |item|\n              assert_match /admin@backupify\\.org|johnny@backupify\\.org|ping_pong_table|ping_pong_table_2|qa2@testbackupify\\.net|qa@testbackupify\\.net|sue@backupify\\.org|tendai@socialgrove\\.com|V3 API/, item[:calendar_title]\n              assert_match /^https/, item[:event_url]\n            end\n          end\n        end\n\n      end\n\n      context \"each_resolved_id\" do\n\n        setup do\n          @slice = [\n            { 'calendar_title' => 'US Holidays1', 'calendar_id' => '123', 'event_url' => 'https://www.google.com/calendar/feeds/en.usa%23holiday%40group.v.calendar.google.com/private/full/h%40ba786cf21caa5b8f15ee73bbd9096733d8edcec1?xoauth_requestor_id=eric@backupify.com' },\n            { 'calendar_title' => 'US Holidays2', 'calendar_id' => '456', 'event_url' => 'https://www.google.com/calendar/feeds/en.usa%23holiday%40group.v.calendar.google.com/private/full/h%40ba786cf21caa5b8f15ee73bbd9096733d8edcec1?xoauth_requestor_id=eric@backupify.com' }\n          ]\n        end\n\n        should \"fetch each event in the slice\" do\n          @items = []\n          @connection.each_resolved_id(@slice) { |data| @items << data }\n\n          assert_equal @items.size, 2\n        end\n\n        should \"call parse_event for each event\" do\n          @items = []\n          @connection.each_resolved_id(@slice) { |data| @items << data }\n\n          @items.each do |item|\n            assert_present item[:service_id]\n            assert_present item[:title]\n          end\n        end\n\n        should \"add the calendar title to each event\" do\n          @items = []\n          @connection.each_resolved_id(@slice) { |data| @items << data }\n\n          assert_equal \"US Holidays1\", @items[0][:calendar]\n          assert_equal \"US Holidays2\", @items[1][:calendar]\n        end\n\n        should \"gracefully skip any events which return a non-auth 400 range error\" do\n          @items = []\n          # should raise a 404\n          @slice << { 'calendar_title' => 'non existent calendar',\n                      'calendar_id' => 'bogus id',\n                      'event_url' => 'https://www.google.com/calendar/feeds/en.bogus%23calendar%40group.v.calendar.google.com/private/full/h%40ba786cf21caa5b8f15ee73bbd9096733d8edcec1?xoauth_requestor_id=eric@backupify.com' }\n\n          @skipped = []\n\n          assert_nothing_raised do\n            @skipped = @connection.each_resolved_id(@slice) { |data| @items << data }\n          end\n\n          assert_equal 2, @items.length\n          assert_equal 1, @skipped.length\n          assert_equal @slice.last, @skipped.first\n        end\n\n        should \"gracefully skip calendar access failures\" do\n          @items = []\n\n          @skipped = []\n\n          Backupify::Google::BasicClient::Client.any_instance.expects(:get).raises(Backupify::Google::BasicClient::GoogleError.exception_for_response(TestHttpResponse.new(401, 'aaaa Cannot access the calendar you requested asdfasdfas')))\n\n          assert_nothing_raised do\n            @skipped = @connection.each_resolved_id(['event_url' => 'https://event.com', 'calendar_title' => 'my cal', 'calendar_id' => 'some_id']){ }\n          end\n\n          assert_equal 1, @skipped.length\n          assert_equal({'event_url' => 'https://event.com', 'calendar_title' => 'my cal', 'calendar_id' => 'some_id'}, @skipped.first)\n        end\n\n        should \"raise other exceptions\" do\n          @items = []\n          @slice << { 'calendar_title' => 'non existant calendar', 'calendar_id' => 'some_id', 'event_url' => 'http://something.com' }\n\n          Backupify::Google::BasicClient::Client.any_instance.expects(:get).raises(Backupify::Google::BasicClient::GoogleError.exception_for_response(TestHttpResponse.new(500, 'other exception')))\n\n          assert_raises do\n            @connection.each_resolved_id(@slice) { |data| @items << data }\n          end\n        end\n\n      end\n\n      context \"fetch_calendar_entries\" do\n\n        should \"skip the backupify restore calendar\" do\n          entries = @connection.send(:fetch_calendar_entries)\n          entries.each do |entry|\n            assert_no_match Regexp.new(BACKUPIFY_RESTORE_LABEL), entry.at_xpath('title').content\n          end\n        end\n\n      end\n\n      context \"fetch_event_info\" do\n\n        should \"fetch event feed for calendar and return hash array with calendar title and event urls\" do\n          items = @connection.send(:fetch_event_info, 'http://www.google.com/calendar/feeds/default/calendars/eric%40backupify.com', nil)\n\n          assert_true items.size > 0\n\n          # each event should have a valid calendar title and url\n          items.each do |item|\n            assert_equal 'eric@backupify.com', item[:calendar_title]\n            assert_match /^https/, item[:event_url]\n          end\n        end\n\n        context 'oauth2' do\n          should \"fetch event feed for calendar and return hash array with calendar title and event urls\" do\n            items = @oauth2_connection.send(:fetch_event_info, 'http://www.google.com/calendar/feeds/default/calendars/admin%40backupify.org', nil)\n\n            assert_true items.size > 0\n\n            # each event should have a valid calendar title and url\n            items.each do |item|\n              assert_equal 'admin@backupify.org', item[:calendar_title]\n              assert_match /^https/, item[:event_url]\n            end\n          end\n        end\n\n\n        should \"skip calendars that we don't have permission to read\" do\n\n          assert_nothing_raised do\n            # trying to pull from my personal calendar (access has been revoked)\n            items = @connection.send(:fetch_event_info, 'http://www.google.com/calendar/feeds/default/calendars/eric.alexander%40gmail.com', nil)\n\n            assert_equal items.size, 0\n          end\n        end\n\n        should \"restrict the event feed if given an after_date\" do\n          after_date = Time.parse('2013-08-01T14:37:07.000Z')\n          client = @connection.instance_variable_get(:@client)\n\n          # first let's make sure we have an event before our after date.\n          items = @connection.send(:fetch_event_info, 'http://www.google.com/calendar/feeds/default/calendars/eric%40backupify.com', nil)\n\n          # we should have at least one entry before the after_date\n          found_old_event = false\n          items.each do |item|\n            body = client.get_body(item[:event_url], {:parse_response => false})\n            entry = Nokogiri::XML(body).at_xpath('//xmlns:entry')\n            updated = Time.parse(entry.at_xpath('xmlns:updated').content)\n            found_old_event = true if updated < after_date\n          end\n          assert_true found_old_event\n\n          # now let's pull the date using the after_date\n          items = @connection.send(:fetch_event_info, 'http://www.google.com/calendar/feeds/default/calendars/eric%40backupify.com', after_date)\n\n          # extract the updated time from each entry returned.  they should all be after 2011-04-15\n          items.each do |item|\n            body = client.get_body(item[:event_url], {:parse_response => false})\n            entry = Nokogiri::XML(body).at_xpath('//xmlns:entry')\n            updated = Time.parse(entry.at_xpath('xmlns:updated').content)\n            assert_true updated > after_date\n          end\n        end\n\n        should \"fetch the next page if it exists\" do\n          items = @connection.send(:fetch_event_info, 'http://www.google.com/calendar/feeds/default/calendars/en.usa%23holiday%40group.v.calendar.google.com', nil)\n\n          # calendar returns 25 entries per page by default.  if we see more than 25, we know we're hitting the next page.\n          assert_true items.size > 25\n        end\n\n      end\n\n      context \"fetch_backupify_calendar_url\" do\n        setup do\n          VCR.eject_cassette\n\n          @user = FactoryGirl.create(:user, :email => 'admin@backupifydevunit1.com')\n          @domain = FactoryGirl.create(:two_legged_domain, :authentication_type => 4, :owner => @user, :name => 'backupifydevunit1.com')\n          @service = FactoryGirl.create(:google_calendar_service, :account_name => 'admin@backupifydevunit1.com', :user => @user.reload)\n        end\n\n        should \"find existing backupify calendar url\" do\n          VCR.use_cassette(\"google_calendar_backupify_calendar_exists\", :record => :once) do\n            connection = @service.connect\n            expected_url = \"https://www.google.com/calendar/feeds/backupifydevunit1.com_vgoqa0biaoj1uaropcm6uh7160%40group.calendar.google.com/private/full\"\n            connection.expects(:create_backupify_calendar).never\n            assert_equal expected_url, connection.fetch_backupify_calendar_url\n          end\n        end\n\n        should \"call create_backupify_calendar when existing calendar cannot be found\" do\n          VCR.use_cassette(\"google_calendar_backupify_calendar_doesnt_exist\", :record => :once) do\n            connection = @service.connect\n            expected_url = \"https://www.google.com/calendar/feeds/backupifydevunit1.com_vgoqa0biaoj1uaropcm6uh7160%40group.calendar.google.com/private/full\"\n            connection.expects(:create_backupify_calendar).returns(expected_url)\n            assert_equal expected_url, connection.fetch_backupify_calendar_url\n          end\n        end\n      end\n\n      context \"create_event\" do\n        setup do\n          @service = FactoryGirl.create(:google_calendar_service,\n                                    :access_key => DEPRECATED_TEST_PERSONAL_TOKEN_KEY,\n                                    :access_secret => DEPRECATED_TEST_PERSONAL_TOKEN_SECRET)\n\n          @datum = GoogleCalendarDatum.new(ActiveSupport::JSON.decode(fixture_data('google_calendar/sample_datum.json')))\n          @datum.service_id = @service.id\n          @datum.content = fixture_data('google_calendar/sample_datum_content.xml')\n          @datum.save!\n\n          WebMock.reset!\n          VCR.insert_cassette('google_calendar_restore', :match_requests_on => [:method, :uri], :record =>:once)\n        end\n\n        teardown do\n          VCR.eject_cassette\n        end\n\n        should \"create a new event with the old data, use existing calendar\" do\n          response = Nokogiri::XML(@service.connect.create_event(@datum, nil).body).remove_namespaces!\n\n          assert_equal @datum.title, response.at_xpath('//entry/title').content\n          assert_equal BACKUPIFY_RESTORE_LABEL, response.at_xpath(\"//entry/who[@email='#{BACKUPIFY_RESTORE_EMAIL}']\")['valueString']\n          assert_not_equal @datum.event_id, response.at_xpath('//entry/id').content\n        end\n\n        should \"restore an old revision of a document to backupify restore group\" do\n          datum = GoogleCalendarDatum.new(ActiveSupport::JSON.decode(fixture_data('google_calendar/sample_datum_2.json')))\n          datum.service_id = @service.id\n          datum.content = fixture_data('google_calendar/sample_datum_content_2.xml')\n          datum.save!\n          datum.s3.store(datum.service.storage_path, \"#{datum.base_content_filename}_2010-09-21.xml\", datum.encrypt(fixture_data('google_calendar/sample_datum_content.xml')))\n\n          revision = '2010-09-21'\n          response = Nokogiri::XML(@service.connect.create_event(datum, revision).body).remove_namespaces!\n\n          # we should get a 200 response code\n          assert_not_equal datum.title, response.at_xpath('//entry/title').content\n          assert_equal BACKUPIFY_RESTORE_LABEL, response.at_xpath(\"//entry/who[@email='#{BACKUPIFY_RESTORE_EMAIL}']\")['valueString']\n          assert_not_equal datum.event_id, response.at_xpath('//entry/id').content\n          assert_equal 'http://schemas.google.com/g/2005#event.confirmed', response.root.at_xpath('eventStatus').attributes['value'].value\n        end\n\n        context \"create a new event\" do\n          setup do\n            # user with no existing (Backupify Restore) calendar\n            @service = FactoryGirl.create(:google_calendar_service, :access_key => DEPRECATED_TEST_PERSONAL_TOKEN_KEY, :access_secret => DEPRECATED_TEST_PERSONAL_TOKEN_SECRET, :account_name => \"test@backupify.com\")\n            @datum.service_id = @service.id\n            @datum.content = @datum.content # required to re-write data to s3\n            @datum.save!  #datum.document_id\n          end\n\n          should \"create a new event with the old data, create a new calendar if it doesn't, and restore guests\" do\n            VCR.use_cassette('google_calendar_restore_2', :match_requests_on => [:method, :uri], :record => :once) do\n              response = Nokogiri::XML(@service.connect.create_event(@datum, nil).body).remove_namespaces!\n\n              assert_equal @datum.title, response.at_xpath('//entry/title').content\n              assert_equal BACKUPIFY_RESTORE_LABEL, response.at_xpath(\"//entry/who[@email='#{BACKUPIFY_RESTORE_EMAIL}']\")['valueString']\n              assert_not_equal @datum.event_id, response.at_xpath('//entry/id').content\n\n              guests_created = response.root.xpath('who').reject{|x| x[:valueString] == BACKUPIFY_RESTORE_LABEL}.collect{|x| x[:email]}\n\n              # Ignore owner, because we don't expect her to be restored as guest.\n              guests_expected = @datum.decode_guests.collect{|x| x[:email]}.reject{|x| x == @service.account_name}\n\n              assert_equal guests_expected.sort, guests_created.sort\n            end\n          end\n\n          should \"not restore guests if user does not own the event\" do\n            VCR.use_cassette('google_calendar_restore_3', :match_requests_on => [:method, :uri], :record => :once) do\n              @service.update_attribute(:account_name, \"someone.else@backupify.com\")\n\n              response = Nokogiri::XML(@service.connect.create_event(@datum, nil).body).remove_namespaces!\n\n              guests_created = response.root.xpath('who').reject{|x| x[:valueString] == BACKUPIFY_RESTORE_LABEL}.collect{|x| x[:email]}\n\n              # Since the service is a guest only, not the owner, we don't want to add guests to the restored event.\n              assert_equal [], guests_created\n            end\n          end\n\n          should \"restore guests if user owns the event and has capital letters in Google Apps account\" do\n            VCR.use_cassette('google_calendar_restore_4', :match_requests_on => [:method, :uri], :record => :once) do\n              @datum.content = fixture_data('google_calendar/event_owned_by_capital_letters.xml')\n              @datum.save!\n\n              response = Nokogiri::XML(@service.connect.create_event(@datum, nil).body).remove_namespaces!\n\n              guests_created = response.root.xpath('who').reject{|x| x[:valueString] == BACKUPIFY_RESTORE_LABEL}.collect{|x| x[:email]}\n\n              # Ignore owner, because we don't expect her to be restored as guest.\n              guests_expected = @datum.decode_guests.collect{|x| x[:email]}.reject{|x| x.downcase == @service.account_name.downcase}\n\n              assert_equal guests_expected.sort, guests_created.sort\n            end\n          end\n\n          should \"restore canceled events as tentative events\" do\n            VCR.use_cassette('google_calendar_restore_tentative', :match_requests_on => [:method, :uri], :record => :once) do\n              @datum.content = fixture_data('google_calendar/canceled_event.xml')\n              @datum.save!\n\n              # Verify datum is cancelled\n              xml = @datum.content\n              xml = Nokogiri::XML(xml)\n              assert_equal 'http://schemas.google.com/g/2005#event.canceled', xml.root.at_xpath('gd:eventStatus').attributes['value'].value\n\n              # Verify it is restored as tentative\n              response = Nokogiri::XML(@service.connect.create_event(@datum, nil).body).remove_namespaces!\n              created_status = response.root.at_xpath('eventStatus').attributes['value'].value\n              assert_equal 'http://schemas.google.com/g/2005#event.tentative', created_status\n            end\n          end\n        end\n      end\n\n      context \"private methods\" do\n        context \"parse_event\" do\n          setup do\n            @client = @connection.instance_variable_get(:@client)\n            body = @client.get_body('https://www.google.com/calendar/feeds/en.usa%23holiday%40group.v.calendar.google.com/private/full/h%40ba786cf21caa5b8f15ee73bbd9096733d8edcec1?xoauth_requestor_id=eric@backupify.com', {:parse_response => false})\n            @calendar_id = 'en.usa%23holiday%40group.v.calendar.google.com'\n            @calendar_title = \"USA Holidays\"\n            @doc = Nokogiri::XML body\n            @entry = @doc.at_xpath('//xmlns:entry')\n          end\n\n          should \"parse basic attributes\" do\n            data = @connection.send(:parse_event, @doc, @calendar_title, @calendar_id)\n\n            assert_equal data[:service_id], @service.id\n            assert_equal data[:event_id], 'h%40ba786cf21caa5b8f15ee73bbd9096733d8edcec1'\n            assert_equal data[:title], 'Veterans Day'\n            assert_equal data[:description], ''\n            assert_nil data[:author_email]\n            assert_equal data[:where], ''\n            assert_equal data[:start_time], Time.parse('2012-11-11')\n            assert_equal data[:end_time], Time.parse('2012-11-12')\n          end\n\n          should \"set the full xml document in the metadatum\" do\n            data = @connection.send(:parse_event, @doc, @calendar_title, @calendar_id)\n\n            assert_equal data[:xml], @doc.to_xml(:encoding => 'UTF-8')\n          end\n        end\n\n        context \"parse additional event attributes\" do\n          setup do\n            @client = @connection.instance_variable_get(:@client)\n            body = @client.get_body('https://www.google.com/calendar/feeds/eric%40backupify.com/private/full/9bbj4r70rifkiglnep22dr33co?xoauth_requestor_id=eric@backupify.com', {:parse_response => false})\n            doc = Nokogiri::XML body\n            @entry = doc.at_xpath('//xmlns:entry')\n            @data = @connection.send(:parse_event, @entry, 'eric@backupify.com', 'eric%40backupify.com')\n          end\n\n          should \"parse content attribute\" do\n            description = \"All Hands... Za for drinks afterwards, unless someone has another suggestion.\"\n\n            assert_equal @data[:description], description\n          end\n\n\n          should \"parse where attribute\" do\n            where = \"backupify world headquarters\"\n\n            assert_equal @data[:where], where\n          end\n\n          should \"add datum fields for migration\" do\n            assert_equal @data[:calendar_id], \"eric@backupify.com\"\n            assert_equal @data[:author_name], \"Rob May\"\n            assert_equal @data[:author_email], \"rob@backupify.com\"\n            assert_equal @data[:status], \"confirmed\"\n            assert_equal @data[:event_id], \"9bbj4r70rifkiglnep22dr33co\"\n            assert_nil @data[:recurrence]\n            assert_equal @data[:format_version], '3.0'\n          end\n\n          should \"build v3 event json\" do\n            cloned_data = @data.clone\n            #can't find better way to do this test independable from time\n            cloned_data[:start_time] = cloned_data[:start_time].in_time_zone('Eastern Time (US & Canada)')\n            cloned_data[:end_time] = cloned_data[:end_time].in_time_zone('Eastern Time (US & Canada)')\n\n            event_json = Jobs::GoogleCalendar::Helper.build_v3_event_json(cloned_data, @entry)\n\n            assert_equal cloned_data['id'], @data[:event_id]\n            assert_equal cloned_data['summary'], @data[:title] # 'All Hands Meeting '\n            assert_equal cloned_data['location'], @data[:where] # 'backupify world headquarters'\n            assert_equal cloned_data['organizer'], {'email' => 'eric@backupify.com', 'displayName' => 'eric@backupify.com'}\n            assert_equal cloned_data['creator'], { 'email' => 'rob@backupify.com', 'displayName' => 'Rob May'}\n            assert_equal cloned_data['visibility'], 'default'\n            assert_equal cloned_data['transparency'], 'opaque'\n            assert_equal cloned_data['start'], {'dateTime' => '2011-03-23 16:00:00 -0400'}\n            assert_equal cloned_data['end'], {'dateTime' => '2011-03-23 16:30:00 -0400'}\n\n            assert_equal cloned_data['reminders'],\n                         {'useDefault' => false,\n                          'overrides' => [\n                              {'method' => 'email', 'minutes' => 10},\n                              {'method' => 'popup', 'minutes' => 10}\n                          ]\n                         }\n\n            assert_equal event_json, \"{\\\"description\\\":\\\"All Hands... Za for drinks afterwards, unless someone has another suggestion.\\\",\\\"created\\\":\\\"2011-03-16T20:26:37Z\\\",\\\"updated\\\":\\\"2011-04-08T00:07:50Z\\\",\\\"status\\\":\\\"confirmed\\\",\\\"kind\\\":\\\"calendar#event\\\",\\\"start\\\":{\\\"dateTime\\\":\\\"2011-03-23T16:00:00-04:00\\\"},\\\"end\\\":{\\\"dateTime\\\":\\\"2011-03-23T16:30:00-04:00\\\"},\\\"visibility\\\":\\\"default\\\",\\\"transparency\\\":\\\"opaque\\\",\\\"reminders\\\":{\\\"useDefault\\\":false,\\\"overrides\\\":[{\\\"method\\\":\\\"email\\\",\\\"minutes\\\":10},{\\\"method\\\":\\\"popup\\\",\\\"minutes\\\":10}]},\\\"guestsCanModify\\\":false,\\\"guestsCanInviteOthers\\\":true,\\\"guestsCanSeeOtherGuests\\\":true,\\\"iCalUID\\\":\\\"9bbj4r70rifkiglnep22dr33co@google.com\\\",\\\"id\\\":\\\"9bbj4r70rifkiglnep22dr33co\\\",\\\"summary\\\":\\\"All Hands Meeting \\\",\\\"location\\\":\\\"backupify world headquarters\\\",\\\"organizer\\\":{\\\"email\\\":\\\"eric@backupify.com\\\",\\\"displayName\\\":\\\"eric@backupify.com\\\"},\\\"creator\\\":{\\\"email\\\":\\\"rob@backupify.com\\\",\\\"displayName\\\":\\\"Rob May\\\"},\\\"attendees\\\":[{\\\"email\\\":\\\"matt@backupify.com\\\",\\\"displayName\\\":\\\"Matt Conway\\\",\\\"responseStatus\\\":\\\"accepted\\\"},{\\\"email\\\":\\\"ryan@backupify.com\\\",\\\"displayName\\\":\\\"Ryan Harnedy\\\",\\\"responseStatus\\\":\\\"accepted\\\"},{\\\"email\\\":\\\"accounting@backupify.com\\\",\\\"displayName\\\":\\\"Kim Wietrecki\\\",\\\"responseStatus\\\":\\\"needsAction\\\"},{\\\"email\\\":\\\"jay@backupify.com\\\",\\\"displayName\\\":\\\"Jay Garmon\\\",\\\"responseStatus\\\":\\\"accepted\\\"},{\\\"email\\\":\\\"steve@backupify.com\\\",\\\"displayName\\\":\\\"Steve Bowler\\\",\\\"responseStatus\\\":\\\"needsAction\\\"},{\\\"email\\\":\\\"ernie@backupify.com\\\",\\\"displayName\\\":\\\"Ernie Makris\\\",\\\"responseStatus\\\":\\\"needsAction\\\"},{\\\"email\\\":\\\"jellis@backupify.com\\\",\\\"displayName\\\":\\\"Jason Ellis\\\",\\\"responseStatus\\\":\\\"accepted\\\"},{\\\"email\\\":\\\"mike@backupify.com\\\",\\\"displayName\\\":\\\"Mike Breen\\\",\\\"responseStatus\\\":\\\"accepted\\\"},{\\\"email\\\":\\\"jason@backupify.com\\\",\\\"displayName\\\":\\\"Jason Haruska\\\",\\\"responseStatus\\\":\\\"accepted\\\"},{\\\"email\\\":\\\"kevin@backupify.com\\\",\\\"displayName\\\":\\\"Kevin Menard\\\",\\\"responseStatus\\\":\\\"needsAction\\\"},{\\\"email\\\":\\\"ben@backupify.com\\\",\\\"displayName\\\":\\\"Benjamin Thomas\\\",\\\"responseStatus\\\":\\\"accepted\\\"},{\\\"email\\\":\\\"kristin@backupify.com\\\",\\\"displayName\\\":\\\"Kristin Dziadul\\\",\\\"responseStatus\\\":\\\"accepted\\\"},{\\\"email\\\":\\\"john@backupify.com\\\",\\\"displayName\\\":\\\"John Kelly\\\",\\\"responseStatus\\\":\\\"accepted\\\"},{\\\"email\\\":\\\"swietrecki@backupify.com\\\",\\\"displayName\\\":\\\"Steve Wietrecki\\\",\\\"responseStatus\\\":\\\"needsAction\\\"},{\\\"email\\\":\\\"dave@backupify.com\\\",\\\"displayName\\\":\\\"Dave Benvenuti\\\",\\\"responseStatus\\\":\\\"needsAction\\\"},{\\\"email\\\":\\\"ashok@backupify.com\\\",\\\"displayName\\\":\\\"Ashok Pitchamani\\\",\\\"responseStatus\\\":\\\"accepted\\\"},{\\\"email\\\":\\\"shannon@backupify.com\\\",\\\"displayName\\\":\\\"Shannon Bator\\\",\\\"responseStatus\\\":\\\"needsAction\\\"},{\\\"email\\\":\\\"charlie@backupify.com\\\",\\\"displayName\\\":\\\"Charlie Ungashick\\\",\\\"responseStatus\\\":\\\"accepted\\\"}]}\"\n          end\n        end\n\n        context \"create_backupify_calendar\" do\n          setup do\n            VCR.eject_cassette\n\n            @user = FactoryGirl.create(:user, :email => 'admin@backupifydevunit1.com')\n            @domain = FactoryGirl.create(:two_legged_domain, :authentication_type => 4, :owner => @user, :name => 'backupifydevunit1.com')\n            @service = FactoryGirl.create(:google_calendar_service, :account_name => 'admin@backupifydevunit1.com', :user => @user.reload)\n          end\n\n          should \"create backupify calendar and return the url\" do\n            VCR.use_cassette(\"google_calendar_create_backupify_calendar\", :record => :once) do\n              connection = @service.connect\n              expected_url = \"https://www.google.com/calendar/feeds/backupifydevunit1.com_b5fecfkjfj1odd6ks1vsoaa474%40group.calendar.google.com/private/full\"\n              assert_equal expected_url, connection.send(:create_backupify_calendar)\n            end\n          end\n        end\n      end\n    end\n  end",
			"ServiceConnection::GoogleCalendarConnection",
			".reset_counters(self.",
			"domain",
			"notification",
			"clear_cache",
			"intergration",
			"deleted",
			"\n      ",
			"data",
			"eventId",
			"calendarId",
			"        binding.pry\n",
			"API_DOCUMENT",
			"response_schema",
			"response_schema.new",
			"clean_up_drive_file",
			"clean",
			"schema.json",
			"def fetch_account",
			"account",
			"drive",
			"calendar",
			"@client",
			"client",
			"each_resolved_id",
			"each_resolved_id\n",
			"each_resolved_id",
			"@client",
			"decorated_client",
			"two_legged_requestor_id",
			"simple_api_access_key",
			" self.decorated_client",
			"def decorated_client",
			"fetch_calendar_entries",
			"fetch_event_info",
			"api",
			"request",
			"ex",
			"TwoLeggedRequestFactory",
			"lib/cequel",
			"thrift",
			"thriftr",
			"cequel",
			"cassandra",
			"cequel",
			"ceq",
			"ce",
			"cql",
			"column_name",
			"service_id	",
			"service_id",
			"cassandra",
			"CASSANDRA_CLIENT"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"track_file_not_found",
			"save_to_s3",
			"fetch_revisions_list",
			"mark_doc_successful",
			"redis_doc_ids",
			"NON_TRIED_SERVICES_REDIS_KEY",
			"FILE_NOT_FOUND_DOC_ID_REDIS_KEY",
			"SUCCESSFUL_SERVICES_REDIS_KEY",
			"SUCCESSFUL_DOC_IDS_REDIS_KEY",
			"SERVICES_WITH_MARKED_SPREADSHEETS",
			"retrieve",
			"keith"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 33308,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"output.find_results":
	{
		"height": 94.0
	},
	"project": "homehookup.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"usersess",
				"app/controllers/user_sessions_controller.rb"
			],
			[
				"gem",
				"Gemfile"
			],
			[
				"jobgooglecalendarhelper",
				"lib/jobs/google_calendar/helper.rb"
			],
			[
				"client",
				"lib/backupify/google/contacts/v3/client.rb"
			],
			[
				"googlecalendar",
				"app/models/google_calendar_datum.rb"
			],
			[
				"jobsgooglecalendarhel",
				"lib/jobs/google_calendar/helper.rb"
			],
			[
				"v2connne",
				"lib/service_connection/google_calendar/v2/connection.rb"
			],
			[
				"segment",
				"lib/jobs/google_docs/revisions/segment_fetch_spreadsheet_revisions.rb"
			],
			[
				"config/app",
				"config/application.rb"
			],
			[
				"exceptionmoni",
				"test/lib/middleware/execption_monitor_test.rb"
			],
			[
				"ex",
				"lib/backupify/middleware/exception_monitor.rb"
			],
			[
				"login",
				"test/lib/middleware/exception_monitor/login_monitor_test.rb"
			],
			[
				"base",
				"lib/backupify/middleware/exception_monitor/base_monitor.rb"
			],
			[
				"seriv",
				"app/models/service.rb"
			],
			[
				"basedatum",
				"app/models/base_datum.rb"
			],
			[
				"bases3datum",
				"app/models/base_s3_datum.rb"
			],
			[
				"baseversioneddatum",
				"app/models/base_versioned_datum.rb"
			],
			[
				"datum",
				"app/models/google_docs_datum.rb"
			],
			[
				"disabledcodestatemachine",
				"app/models/service_concerns/disabled_code_state_machine.rb"
			],
			[
				"service",
				"app/models/service.rb"
			],
			[
				"user",
				"app/models/user.rb"
			],
			[
				"masterfe",
				"lib/jobs/google_docs/revisions/master_fetch_spreadsheet_revisions.rb"
			],
			[
				"segementcommon",
				"lib/jobs/generic/backup/segment_common.rb"
			],
			[
				"usersessionscontr",
				"test/functional/user_sessions_controller_test.rb"
			],
			[
				"statsdtest",
				"test/unit/backupify/statsd_test.rb"
			],
			[
				"applicationhelper",
				"app/helpers/application_helper.rb"
			],
			[
				"userscontrollertest",
				"test/functional/users_controller_test.rb"
			],
			[
				"salesforce/users",
				"app/controllers/salesforce/users_controller.rb"
			],
			[
				"salesforceservec",
				"app/controllers/salesforce_services_controller.rb"
			],
			[
				"backupifystatsd",
				"lib/backupify/statsd.rb"
			],
			[
				"backupify",
				"app/models/backupify_product.rb"
			],
			[
				"stats",
				"config/initializers/statsd.rb"
			],
			[
				"addnewgoogledoma",
				"test/unit/jobs/add_new_google_domain_users_test.rb"
			],
			[
				"addnew",
				"lib/jobs/add_new_google_domain_users.rb"
			],
			[
				"add_users_",
				"test/unit/jobs/domains/add_users_from_organization_units_test.rb"
			],
			[
				"domain.rb",
				"app/models/domain.rb"
			],
			[
				"basem",
				"lib/backupify/middleware/exception_monitor/base_monitor.rb"
			],
			[
				"segmentfetc",
				"lib/jobs/google_docs/revisions/segment_fetch_spreadsheet_revisions.rb"
			],
			[
				"serviceconnectioninterface",
				"lib/service_connection/service_connection_interface.rb"
			],
			[
				"basegoogleconnection",
				"lib/service_connection/base_google_connection.rb"
			],
			[
				"google/contacts/v3/client",
				"lib/backupify/google/contacts/v3/client.rb"
			],
			[
				"contacts",
				"lib/service_connection/google_contacts_connection.rb"
			],
			[
				"middleware",
				"app/views/support_notifier/user_add_segment_individual_failures_warning.text.erb"
			],
			[
				"masterfet",
				"lib/jobs/google_docs/revisions/master_fetch_spreadsheet_revisions.rb"
			],
			[
				"rake",
				"Rakefile"
			],
			[
				"route",
				"config/routes.rb"
			],
			[
				"apitest",
				"test/unit/helpers/api_helper_test.rb"
			],
			[
				"domain",
				"lib/domain_connection.rb"
			],
			[
				"doam",
				"app/models/domain.rb"
			],
			[
				"user_test.rb",
				"test/unit/user_test.rb"
			],
			[
				"exceptionm",
				"lib/backupify/middleware/exception_monitor.rb"
			],
			[
				"monitor",
				"config/initializers/exception_monitor.rb"
			],
			[
				"eventapi",
				"test/integration/backupify/google/calendar/v3/events_api_integration_test.rb"
			],
			[
				"calendar_list_api_integration_test.rb",
				"test/integration/backupify/google/calendar/v3/calendar_list_api_integration_test.rb"
			],
			[
				"calendarapi",
				"test/unit/backupify/google/calendar/v3/calendarlist_api_test.rb"
			],
			[
				"events",
				"test/unit/backupify/google/calendar/v3/events_api_test.rb"
			],
			[
				"calendarv3",
				"lib/backupify/google/calendar/v3/client.rb"
			],
			[
				"oauth2_calendarlist",
				"test/fixtures/vcr/google/calendar/v3/oauth2_calendarlist.yml"
			],
			[
				"oauth2_events",
				"test/fixtures/vcr/google/calendar/v3/oauth2_events.yml"
			],
			[
				"googlecalendartest",
				"test/unit/service_connection/google_calendar/v2/google_calendar_connection_test.rb"
			],
			[
				"salesforcesuc",
				"test/functional/account/salesforce_subscription_controller_test.rb"
			],
			[
				"salesforceservicecon",
				"test/functional/salesforce_services_controller_test.rb"
			],
			[
				"salesforcecontroller",
				"test/functional/account/salesforce_subscription_controller_test.rb"
			],
			[
				"test/unit/service_connection/google_calendar/v2/google_calendar_connection_test.rb",
				"test/unit/service_connection/google_calendar/v2/google_calendar_connection_test.rb"
			],
			[
				"serviceconnection",
				"lib/service_connection/service_connection_interface.rb"
			],
			[
				"oauth1",
				"test/test_constants/googleapps/o_auth1_credentials.rb"
			],
			[
				"test/unit/jobs/google_calendar/restores/writer_test.rb",
				"test/unit/jobs/google_calendar/restores/writer_test.rb"
			],
			[
				"test/unit/google_calendar_service_test.rb",
				"test/unit/google_calendar_service_test.rb"
			],
			[
				"masterfetch",
				"lib/jobs/google_docs/revisions/master_fetch_spreadsheet_revisions.rb"
			],
			[
				"test/unit/service_connection/v2/",
				"test/unit/service_connection/v2/google_calendar_connection_test.rb"
			],
			[
				"lib/service_connection/v2/",
				"lib/service_connection/v2/google_calendar_connection.rb"
			],
			[
				"serviceconnectiongoogleca",
				"lib/service_connection/google_calendar_connection.rb"
			],
			[
				"serviceconnectiongoogle",
				"lib/service_connection/google_apps_connection.rb"
			],
			[
				"calconn",
				"lib/service_connection/google_calendar_connection.rb"
			],
			[
				"segementfetc",
				"lib/jobs/google_docs/revisions/segment_fetch_spreadsheet_revisions.rb"
			],
			[
				"fetc",
				"lib/jobs/google_docs/revisions/master_fetch_spreadsheet_revisions.rb"
			],
			[
				"segmentfetch",
				"lib/jobs/google_docs/revisions/segment_fetch_spreadsheet_revisions.rb"
			],
			[
				"fetchspread",
				"lib/jobs/google_docs/revisions/master_fetch_spreadsheet_revisions.rb"
			],
			[
				"calendarlist_api_test",
				"test/unit/backupify/google/calendar/v3/calendarlist_api_test.rb"
			],
			[
				"baseapi",
				"test/unit/backupify/google/base_api_test.rb"
			],
			[
				"eventsapiintergrationtest",
				"test/integration/backupify/google/calendar/v3/events_api_intergration_test.rb"
			],
			[
				"s3",
				"lib/jobs/duplicate_s3_cleanup.rb"
			],
			[
				"s3dat",
				"app/models/base_s3_datum.rb"
			],
			[
				"googledocsconnect",
				"lib/service_connection/google_docs_connection.rb"
			],
			[
				"googledrive",
				"lib/service_connection/google_drive_connection.rb"
			],
			[
				"googledocsconnec",
				"lib/service_connection/google_docs_connection.rb"
			],
			[
				"googledrivec",
				"lib/service_connection/google_drive_connection.rb"
			],
			[
				"googleappsacc",
				"app/models/google_apps_account.rb"
			],
			[
				"driveconnect",
				"lib/service_connection/google_drive_connection.rb"
			],
			[
				"statsd",
				"config/initializers/statsd.rb"
			],
			[
				"apicallcountloggingdecorator",
				"lib/backupify/google/decorators/api_call_count_logging_decorator.rb"
			],
			[
				"googlecal",
				"app/models/google_calendar_datum.rb"
			],
			[
				"calendar",
				"lib/service_connection/google_calendar_connection.rb"
			],
			[
				"driveconne",
				"lib/service_connection/google_drive_connection.rb"
			],
			[
				"base_datum",
				"app/models/base_datum.rb"
			],
			[
				"spec",
				"spec/examples/spec_helper.rb"
			],
			[
				"ver",
				"lib/cequel/version.rb"
			],
			[
				"gemfile",
				"Gemfile.lock"
			],
			[
				"googlecalendardat",
				"app/models/google_calendar_datum.rb"
			],
			[
				"postdata",
				"lib/jobs/post_backup_data_stats.rb"
			],
			[
				"ge",
				"Gemfile"
			],
			[
				"testhel",
				"test/test_helper.rb"
			],
			[
				"vers",
				"app/models/base_versioned_datum.rb"
			],
			[
				"googlemail",
				"app/models/google_mail_datum.rb"
			],
			[
				"postbackup",
				"lib/jobs/post_backup_data_stats.rb"
			],
			[
				"salesforcesub",
				"test/functional/account/salesforce_subscription_controller_test.rb"
			],
			[
				"cassandra",
				"config/rubber/role/cassandra/cassandra.yaml"
			],
			[
				"backupifypr",
				"app/models/backupify_product.rb"
			],
			[
				"activat",
				"app/models/activation.rb"
			],
			[
				"backupiuf",
				"app/models/backupify_product.rb"
			],
			[
				"line",
				"app/models/line_item.rb"
			],
			[
				"salesforceservice",
				"app/models/salesforce_service.rb"
			],
			[
				"salesforce_sub",
				"test/functional/account/salesforce_subscription_controller_test.rb"
			],
			[
				"salesforce",
				"app/controllers/account/salesforce_subscription_controller.rb"
			],
			[
				"salesforceserv",
				"app/models/salesforce_service.rb"
			],
			[
				"basevers",
				"app/models/base_versioned_datum.rb"
			],
			[
				"usersyncandbillingupdatescheduler",
				"lib/jobs/salesforce/user_sync_and_billing_update_scheduler.rb"
			],
			[
				"schedule",
				"config/async_job_schedule.yml"
			],
			[
				"googleclendarhelper",
				"app/helpers/google_calendar_services_helper.rb"
			],
			[
				"calendardatum",
				"app/models/google_calendar_datum.rb"
			],
			[
				"bases3dat",
				"app/models/base_s3_datum.rb"
			],
			[
				"baseda",
				"app/models/base_datum.rb"
			],
			[
				"subscription",
				"app/models/subscription.rb"
			],
			[
				"serv",
				"app/models/service.rb"
			],
			[
				"salesforce_subscription",
				"app/controllers/account/salesforce_subscription_controller.rb"
			],
			[
				"routes",
				"config/routes.rb"
			],
			[
				"clientrb",
				"lib/backupify/google/api/client.rb"
			],
			[
				"schema",
				"db/schema.rb"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 638.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 279.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
